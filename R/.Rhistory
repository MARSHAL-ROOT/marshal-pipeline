shape = "scenario",
linetype = "scenario")+
facet_grid(~humid, labeller = as_labeller(babbel))
Transpiration%>%
filter(humid %in% c("-7000", "-15000"))%>%
group_by(ex, humid, age, scenario, rep)%>%
summarise(Tact = mean(Tact),
Tpot = mean(Tpot))%>%
ggplot(aes(x= age, y = Tact, colour = factor(ex)))+
geom_point(aes(shape = factor(scenario)),size = 2.5, alpha = 0.4)+
geom_smooth(aes(x = age, y = Tpot, colour = factor(ex),
linetype = factor(scenario)), alpha = 0.5, se = F)+
geom_hline(yintercept = 0)+
theme_classic()+
xlab("Time (d)") +
ylab("Actual transpiration")+
labs(colour = "Root architecture example")+  labs(colour = "Root architecture example",
shape = "scenario",
linetype = "scenario")+
facet_grid(~humid, labeller = as_labeller(babbel))
Transpiration%>%
filter(humid %in% c("-7000", "-15000"))%>%
group_by(ex, humid, age, scenario, rep)%>%
summarise(Tact = mean(Tact),
Tpot = mean(Tpot))%>%
ggplot(aes(x= age, y = Tact, colour = factor(ex)))+
geom_point(aes(shape = factor(scenario)),size = 2.5, alpha = 0.4)+
geom_smooth(aes(x = age, y = Tpot, colour = factor(ex),
linetype = factor(scenario)), alpha = 0.5, se = F)+
geom_hline(yintercept = 0)+
theme_classic()+
xlab("Time (d)") +
ylab("Actual transpiration")+
labs(colour = "RSA example")+  labs(colour = "RSA example",
shape = "scenario",
linetype = "scenario")+
facet_grid(~humid, labeller = as_labeller(babbel))
Transpiration%>%
filter(humid %in% c("-7000", "-15000"))%>%
group_by(ex, humid, age, scenario, rep)%>%
summarise(Tact = mean(Tact),
Tpot = mean(Tpot))%>%
ggplot(aes(x= age, y = Tact, colour = factor(ex)))+
geom_point(aes(shape = factor(scenario)),size = 2.5, alpha = 0.4)+
geom_smooth(aes(x = age, y = Tpot, colour = factor(ex),
linetype = factor(scenario)), alpha = 0.5, se = F)+
geom_hline(yintercept = 0)+
theme_classic()+
xlab("Time (d)") +
ylab("Actual transpiration")+
labs(colour = "RSA example")+  labs(colour = "RSA example",
shape = "scenario",
linetype = "scenario")+
facet_wrap(~humid, labeller = as_labeller(babbel))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/marshal-pipeline")
library(data.table)
library(tidyverse)
library(Matrix)
library(readxl)
library(cowplot)
library(xml2)
library(knitr)
#library(marshal) # ! not working
`%!in%` <- compose(`!`, `%in%`)
source("R/io_function.R")
# Working version of MARSHAL
source("R/getSUF.R")
soil %>%
filter(value %in% c(10,30,50,60))%>%
ggplot(aes(psi, z, colour = factor(value)))+
geom_point(alpha = 0.7)+
theme_classic()+
xlab("Pressure head (hPa)") +
ylab("Depth (cm)")+
labs(colour = "Time (days)")+
facet_grid(~humid, labeller =as_labeller(babbel))+
theme(axis.text.x=element_text(angle=90))
# Creating some values for the water potential in the soil along the profile depth.
profile_depth <- 150
z <- seq(-profile_depth, 0, by = 5)
value <- sort(rep(full_time, length(z)))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/marshal-pipeline")
library(data.table)
library(tidyverse)
library(Matrix)
library(readxl)
library(cowplot)
library(xml2)
library(knitr)
#library(marshal) # ! not working
`%!in%` <- compose(`!`, `%in%`)
source("R/io_function.R")
# Working version of MARSHAL
source("R/getSUF.R")
babbel <- c("all_rain" = "rain all time",
"Zea_mays_1_Leitner_2010" = "Leitner 10",
"Zea_mays_3_Postma_2011" = "Postma 11",
"Zea_mays_4_Leitner_2014"=  "Leitner 14",
"1" = "1", "2"= "2", "3"="3", "4" = "4", "5"="5",
"10" = "10", "20" = "20", "30" = "30", "40" = "40",
"50" = "50", "60"= "60",
"type_1" = "Axes", "type_2" = "Lateral",
"-300" = "humid", "-7000" = "dry", "-15000" = "arid")
# Conductivities from Doussan et al. 1998
conductivities <- read_excel("www/conductivities.xlsx")
# Creating scenarios of Conductivities similar to the Doussan et al. 1998
# at the exeption of all changes of conductivities have been move forward or backward to
# the tip.
conduct_1 <- conductivities%>%
mutate(scenario = 1)
conduct_2 <- conductivities%>%
mutate(scenario = 2)
conduct_2$x[which(conduct_2$x %!in% c(0, 100))] <- conduct_2$x[which(conduct_2$x %!in%
c(0, 100))]-5
conduct_3 <- conductivities%>%
mutate(scenario = 3)
conduct_3$x[which(conduct_3$x %!in% c(0, 100))] <- conduct_3$x[which(conduct_3$x %!in%
c(0, 100))]+5
conductivities <- rbind(conduct_1, conduct_2, conduct_3)
# Evolution of Kx along the root types
conductivities %>%
filter(type == "kx",
order_id == 1 | order_id == 2) %>%
ggplot(aes(x,y, colour = factor(scenario)))+
geom_line(aes(color = factor(scenario), linetype = factor(scenario)))+
theme_classic()+
xlab("distance from the tips (cm)") +
ylab("Axial conductance (cm4 hPa-1 d-1)")+
labs(colour = "Conductivity \nscenarios")+
guides(linetype = F)+
facet_wrap(~order, scales = "free", labeller =as_labeller(babbel))
#Evolution of Kr along the root types
conductivities %>%
filter(type == "kr",
order_id == 1 | order_id == 2) %>%
ggplot(aes(x,y, colour = factor(scenario)))+
geom_line(aes(color = factor(scenario), linetype = factor(scenario)))+
theme_classic()+
xlab("distance from the tips (cm)")+
ylab("Radial conductivity (cm hPa-1 d-1)")+
labs(colour = "Conductivity \nscenarios")+
guides(linetype = F)+
facet_wrap(~order, scales = "free", labeller =as_labeller(babbel))
# Number of repetion per root system architecture example
nrep <- 5
# List of three CrootBox parameter for corn
param_choise <- c("Zea_mays_1_Leitner_2010",
"Zea_mays_3_Postma_2011",
"Zea_mays_4_Leitner_2014")
all_roots <- NULL
for(param_name in param_choise){
# Load param of the selected example
rparam <- read_rparam(path = paste0("./www/", param_name, ".rparam"))
pparam <- read_pparam(path = paste0("./www/", param_name, ".pparam"))
# Overwrite the param files that will be use
write_rparam(rparam, "./www/param.rparam")
write_pparam(pparam, "./www/param.pparam")
for(i in c(1:nrep)){
# Run CRootBox ----
system("www/a.exe")
# Get all the files exported by CRootBox
fls <- list.files("./")
fls <- fls[grepl("rootsystem.txt", fls)]
for(f in fls){
temp <- fread(f, header = T)
temp$age <- strsplit(f, "_")[[1]][1]
temp$rep <- i
temp$ex <- param_name
all_roots <- rbind(all_roots, temp)
}
}
}
# Saving the root system information
# write_csv(all_roots, "all_roots.csv")
# all_roots <- read.csv("all_roots.csv")
# Take the same time variable as the one that were implemented in CRootBox.
full_time <- sort(unique(as.numeric(all_roots$age)))
time_step = full_time[2]-full_time[1]
endTime = max(full_time)
ntimesteps = endTime/time_step
all_roots%>%
filter(age == "30",
rep < 6) %>%
ggplot()+
theme_classic()+
coord_fixed() +
geom_segment(data = , aes(x = x1, y = z1, xend = x2, yend = z2), alpha = 0.2)+
geom_hline(yintercept = 0, color = "tan3")+
facet_grid(ex ~ rep, labeller = as_labeller(babbel))
root_20 <- all_roots%>%
filter(age %in% c("20","40","60"))
pol_ch = poly_area<- NULL
for(i in unique(all_roots$ex)){
for(j in unique(all_roots$rep)){
for(ag in unique(root_20$age)){
for(xy in c("x", "y")){# get the convex hull from two sides
tmp <- root_20%>%
filter(ex == i, rep == j, age == ag)%>%
select(paste0(xy,"2"),z2, ex, rep, age)
# select(x2,z2, ex, rep, age)
first_col <- tmp[,1]
x <- matrix(c(first_col, tmp$z2), nc = 2)
ch <- chull(x= first_col, y = tmp$z2)
ch <- c(ch, ch[1])
# Area of the convex hull
xy.coords <- cbind(first_col, tmp$z2)
chull.coords <- xy.coords[ch,]
chull.poly <- sp::Polygon(chull.coords, hole = F)
chull.area <- chull.poly@area
polyg <- cbind(as.data.frame(x[ch,]), ex = i, rep = paste0(j,xy), age = ag)
pol_area <- c(chull.area/10000)%>% # Transformation into square meter
as.tibble()%>%
transmute(area = value, ex = i, rep= paste0(j,xy), age = as.numeric(ag))
poly_area <- rbind(poly_area, pol_area)
pol_ch <- rbind(pol_ch, polyg)
}
}
}
}
pol_ch%>%
ggplot()+
theme_classic()+
coord_fixed() +
geom_polygon(aes(x = V1, y = V2, fill = factor(rep)), alpha = 0.2)+
ylab("depth (cm)")+
xlab("L (cm)")+
facet_grid(age ~ ex, labeller = as_labeller(babbel))+
labs(fill = "repetitions")
poly_area%>%
ggplot(aes(x = as.factor(age), y = area))+
theme_classic()+
geom_boxplot(aes(fill = ex), alpha = 0.2)+
geom_jitter(aes(shape = ex, colour = ex), size = 3, width = 0.1, height = 0, alpha = 0.5)+
ylab("area (mÂ²)")+
xlab("time (d)")+
labs(colour = "RSA example",
shape = "RSA example")+
guides(fill = F)
# Summarise the total root length and the rooting depth information.
RLD <- all_roots%>%
mutate(age = as.numeric(age))%>%
group_by(age, rep, ex)%>%
summarise(root = sum(length),
rooting_depth = min(z2))
RLD %>%
ggplot(aes(age, rooting_depth, colour = factor(ex)))+
geom_point(size = 2, alpha = 0.5)+
geom_point(aes(x = 0, y = -3), size = 2, alpha = 0.5, shape = 14)+ # seeds
geom_hline(yintercept = 0)+
theme_classic()+
facet_wrap(~ex, labeller =as_labeller(babbel))+
guides(colour = F)
RLD %>%
ggplot(aes(age, root/1000, colour = factor(ex)))+
geom_point(size = 2, alpha = 0.5)+
geom_point(aes(x = 0, y = 0), size = 2)+
theme_classic()+
facet_wrap(~ex, labeller =as_labeller(babbel))+
labs(colour = "RSA example")+
ylab("Total root length (m)")+
xlab("Time (d)")
all_roots%>%
group_by(age, ex, rep)%>%
summarise(tip = max(sort(unique(branchID))))%>%
ggplot(aes(age, tip, colour = factor(ex)))+
geom_point(size = 2, alpha = 0.5)+
geom_point(aes(x = 0, y = 0), size = 2)+
theme_classic()+
facet_wrap(~ex, labeller =as_labeller(babbel))+
labs(colour = "RSA example")+
ylab("Number of roots")+
xlab("Time (d)")
# Creating some values for the water potential in the soil along the profile depth.
profile_depth <- 150
z <- seq(-profile_depth, 0, by = 5)
value <- sort(rep(full_time, length(z)))
psi <- rep(-230, length(value))
z <- rep(z, ntimesteps)
soil <- NULL
# Making three scenarios
for(i in c(-300, -7000, -15000)){
soil_tmp <- cbind(z, value, psi)%>%
as.tibble()%>%
mutate(psi = i*(((z+profile_depth)^(10))*value)/
((profile_depth^10)*endTime)-230,
humid = i)
soil_tmp <- soil_tmp%>%
mutate(id = 1:nrow(soil_tmp))
soil<- rbind(soil, soil_tmp)
}
all_roots%>%
filter(age == "30",
rep < 6) %>%
ggplot()+
theme_classic()+
coord_fixed() +
geom_segment(data = , aes(x = x1, y = z1, xend = x2, yend = z2), alpha = 0.2)+
geom_hline(yintercept = 0, color = "tan3")+
facet_grid(ex ~ rep, labeller = as_labeller(babbel))
# Creating some values for the water potential in the soil along the profile depth.
profile_depth <- 150
z <- seq(-profile_depth, 0, by = 5)
value <- sort(rep(full_time, length(z)))
psi <- rep(-230, length(value))
z <- rep(z, ntimesteps)
soil <- NULL
# Making three scenarios
for(i in c(-300, -7000, -15000)){
soil_tmp <- cbind(z, value, psi)%>%
as.tibble()%>%
mutate(psi = i*(((z+profile_depth)^(10))*value)/
((profile_depth^10)*endTime)-230,
humid = i)
soil_tmp <- soil_tmp%>%
mutate(id = 1:nrow(soil_tmp))
soil<- rbind(soil, soil_tmp)
}
# Creating some values for the water potential in the soil along the profile depth.
profile_depth <- 150
z <- seq(-profile_depth, 0, by = 5)
value <- sort(rep(full_time, length(z)))
psi <- rep(-230, length(value))
z <- rep(z, ntimesteps)
soil <- NULL
# Making three scenarios
for(i in c(-300, -7000, -15000)){
soil_tmp <- cbind(z, value, psi)%>%
as.tibble()%>%
mutate(psi = i*(((z+profile_depth)^(10))*value)/
((profile_depth^10)*endTime)-230,
humid = i)
soil_tmp <- soil_tmp%>%
mutate(id = 1:nrow(soil_tmp))
soil<- rbind(soil, soil_tmp)
}
soil %>%
filter(value %in% c(10,30,50,60))%>%
ggplot(aes(psi, z, colour = factor(value)))+
geom_point(alpha = 0.7)+
theme_classic()+
xlab("Pressure head (hPa)") +
ylab("Depth (cm)")+
labs(colour = "Time (days)")+
facet_grid(~humid, labeller =as_labeller(babbel))+
theme(axis.text.x=element_text(angle=90))
soil
# Water potential at the collar (hPa)
tpots <- -15000
exa <- all_roots$ex[1]
re <- 1
ag <- 10
sen <- 1
hum <- soil$humid[1]
# Select specific Soil for the simulation
temp_soil <- soil %>%
filter(value == ag,
humid == hum)%>%
select(-value, -humid)
table_soil <- temp_soil
# Select specific root system for the simulation
temp_root <- all_roots %>%
filter(age == ag,
rep == re,
ex == exa)%>%
as.tibble()%>%
select(-ex)
table_data <- temp_root
# Select specific conductivities
temp_conduct <- conductivities%>%
filter(scenario == sen)%>%
select(-scenario)
table_cond <- temp_conduct
#### PROCESS INPUT TABL
l <- table_data$length    	  # segment length
l[l == 0] <- 10e-9
table_data$length = l
setDT(table_data)
# Re-arrange the input data
orders <- unique(table_cond$order)
ids <- unique(table_cond$order_id)
#table_data$name <- "root"
for(o in c(1:length(orders))){
table_data$name[table_data$type == ids[o]] <- orders[o]
}
first <- table_data[table_data$node1ID == 0,]
nodals_ids <- unique(table_data$branchID[table_data$type == 4 | table_data$type == 5])
for(no in nodals_ids){
temp <- table_data[table_data$branchID == no][1]
connection <- data.frame(node1ID = 0,
node2ID = temp$node1ID,
branchID = temp$branchID,
x1 = first$x1, y1 = first$y1, z1 = first$z1,
x2 = temp$x1, y2 = temp$y1, z2 = temp$z1,
radius = temp$radius,
length = sqrt((first$x1-temp$x1)^2 + (first$y1-temp$y1)^2 + (first$z1-temp$z1)^2 ),
R = 0, G = 0, B = 0,
time = temp$time,
type = 0, #replace temp$type by 0 ?
age = temp$age,
rep = temp$rep,
name = temp$name)
new_table = rbind(table_data, connection)
table_data = new_table
}
table_data <- table_data[order(table_data$node2ID, decreasing = F),]
prev <- table_data$node1ID 	  # mother segment
l <- table_data$length    	  # segment length
l[l == 0] <- 10e-9
r <- table_data$radius    	  # segment radius
z <- table_data$z2           # z-position
order <- table_data$type      # segment order
seg_age <- max(table_data$time) - table_data$time     # segment age
Nseg=length(l)      	  # Total number of segment
Psi_sr_homogeneous <- -300      # Homogeneous soil-root potential
Psi_sr_heterogeneous <- -3000   # Heterogeneous soil-root potential
order_uni=unique(order)
kr=matrix(0,Nseg,1) # radial conductivity of the segments
kx=matrix(0,Nseg,1) # Axial conductance of the segments
# Linear interpolation
for ( i in 1:length(order_uni)) {
pos = is.element(order,order_uni[i])
od <- order_uni[i]
#if(od == 4) od <- 1 # if nodal, take value for primary
x = table_cond$x[table_cond$order_id == od & table_cond$type == "kr"]
y = table_cond$y[table_cond$order_id == od & table_cond$type == "kr"]
x <- c(x, 5000)
y <- c(y, y[length(y)])
xout = data.frame(seg_age[pos])
temp=data.frame(approx(x,y,xout[,1]))
kr[pos]=temp[,2]
x = table_cond$x[table_cond$order_id == od & table_cond$type == "kx"]
y = table_cond$y[table_cond$order_id == od & table_cond$type == "kx"]
x <- c(x, 5000)
y <- c(y, y[length(y)])
temp=data.frame(approx(x,y,xout[,1]))
kx[pos]=temp[,2]
}
# Combination of hydraulics and geomitric properties
kappa=sqrt(2*pi*r*kr*kx)  # kappa
tau=sqrt(2*pi*r*kr/kx)    # tau
Psi_sr= Psi_sr_homogeneous * matrix(1,Nseg,1) # Soil-root potential for each segment
####################################################
# Build Matrices  ------------------------------------
A = Matrix(c(0),nrow=Nseg+1,ncol=Nseg+1,sparse = TRUE) # Matrix A sparse
Psi_sr
####################################################
# Build Matrices  ------------------------------------
A = Matrix(c(0),nrow=Nseg+1,ncol=Nseg+1,sparse = TRUE) # Matrix A sparse
j <- 1:Nseg
i <- prev
rows <- i+1
columns <- i+1
values=-kappa/sinh(tau*l)-kappa*tanh(tau*l/2);
rows=c(rows,j+1)
columns=c(columns,i+1)
values=c(values,kappa/sinh(tau*l))
rows=c(rows,i+1)
columns=c(columns,j+1)
values=c(values,-kappa*tanh(tau*l/2)+kappa/tanh(tau*l))
rows=c(rows,j+1)
columns=c(columns,j+1)
values=c(values,-kappa/tanh(tau*l))
x=mapply(values,FUN=as.numeric)
A <- sparseMatrix(rows, columns, x = x) # Assignates values to specific locations
a <- A[-1,-1]				    # a matrix = A without the first line and column
A
rows
prev
A
a
?mapply
values
values
-kappa*tanh(tau*l/2)+kappa/tanh(tau*l)
kappa/sinh(tau*l)
# Build Matrix B
B <- Matrix(c(0),nrow=Nseg+1,ncol=1,sparse = TRUE) # Matrix B sparse
columns <- matrix(1,Nseg,1)
rows <- i+1;
values <- -Psi_sr*kappa*tanh(tau*l/2)
rows <- c(rows,j+1)
columns <- c(columns,matrix(1,Nseg,1))
values <- c(values,-Psi_sr*kappa*tanh(tau*l/2))
x <- mapply(values,FUN=as.numeric)
B <- sparseMatrix(rows, columns, x = x) # Assignates values to specific locations
b <- B[-1] # b matrix = B without the first line
prev_collar <- (prev==0)
matrix(1,Nseg,1)
data.frame(approx(table_soil$z, table_soil$psi, z))[,2]
table_soil
table_soil <- table_soil%>%
mutate(x = c(-75:75),
psix = psi)
table_soil <- table_soil%>%
mutate(x = c(-74:75),
psix = psi)
table_soil <- table_soil%>%
mutate(x = c(-74:75),
psix = psi)
table_soil <- table_soil%>%
mutate(x = seq(-75,75,5),
psix = psi)
table_soil <- rbind(data.table(id = 0, z = 100, psi = table_soil$psi[1], x = 100, psix = table_soil$psix[1]), table_soil)
table_soil
table_soil <- rbind(table_soil, data.table(id = nrow(table_soil)+1, z = -1000, psi = table_soil$psi[nrow(table_soil)],
x = -1000, psix = table_soil$psix[nrow(table_soil)]))
table_soil
Psi_sr <- data.frame(approx(table_soil$z, table_soil$x, table_soil$psix, table_soil$psi, z, x))[,2]
Psi_sr <- data.frame(approx(table_soil$z, table_soil$psi, z, table_soil$x, table_soil$psix, x))[,2]
table_soil
